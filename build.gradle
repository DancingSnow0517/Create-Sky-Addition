buildscript {

    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        // MixinGradle:
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
// MixinGradle:
apply plugin: 'org.spongepowered.mixin'

String semver = "${minecraft_version}-${version_major}.${version_minor}.${version_patch}"
version = "${semver}"
group = 'cn.dancingsnow.create_sky' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'create_sky'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'
    runs {
        client {
            workingDirectory project.file('run')

            arg '-mixin.config=create_sky.mixins.json'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'fml.earlyprogresswindow', 'false'

            mods {
                create_sky {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            arg '-mixin.config=create_sky.mixins.json'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            mods {
                create_sky {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            property 'fml.earlyprogresswindow', 'false'

            args '--mod', 'create_sky', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                create_sky {
                    source sourceSets.main
                }
            }
        }
    }
}
mixin {
    add sourceSets.main, "create_sky.refmap.json"

    config "create_sky.mixins.json"
}
sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name 'tterragmaven'
        url 'https://maven.tterrag.com'
    }
    maven {
        url "https://maven.architectury.dev/"
    }
    maven {
        url "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.ftb.mods"
        }
    }
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.28'

    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'


    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    implementation fg.deobf("curse.maven:flywheel-486392:${flywheel_file}")
    implementation fg.deobf("curse.maven:create-328085:${create_file}")
    implementation fg.deobf("curse.maven:jade-324717:${jade_file}")
    implementation fg.deobf("curse.maven:cofh-core-69162:${cofhcore_file}")
    implementation fg.deobf("curse.maven:thermal-foundation-222880:${thermal_file}")
    implementation fg.deobf("curse.maven:ctm-267602:${ctm_file}")
    implementation fg.deobf("curse.maven:applied-energistics-2-223794:${ae2_file}")

}
jar {
    manifest {
        attributes([
            "Specification-Title": "create_sky",
            "Specification-Vendor": "create_skysareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"create_skysareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }

    }
}
